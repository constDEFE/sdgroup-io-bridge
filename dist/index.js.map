{"version":3,"sources":["../src/BridgeClient.ts","../src/enums.ts","../src/hooks/useDestroy.ts","../src/services/service.ts","../src/services/application.service.ts","../src/services/auth.service.ts","../src/services/bridge.service.ts","../src/services/converter.service.ts","../src/services/fee.service.ts","../src/services/network.service.ts","../src/services/offer.service.ts","../src/services/payments.service.ts","../src/services/token.service.ts","../src/services/wallet-balance.service.ts","../src/services/wallet.service.ts","../src/helpers/amount-transform.ts"],"sourcesContent":["import type { BridgeClientConfiguration, Application, SupportedServices} from \"@/types.d\";\r\nimport axios, { type AxiosInstance } from \"axios\";\r\nimport { BehaviorSubject, filter, type Observable } from \"rxjs\";\r\nimport { CallerType, HeadersEnum } from \"@/enums\";\r\n\r\nexport class BridgeClient {\r\n\tprivate readonly http: AxiosInstance;\r\n\tprivate readonly storage: Storage;\r\n\tprivate readonly instanceServices = new Map();\r\n\tprivate readonly application$: BehaviorSubject<Application | undefined> = \r\n\t\tnew BehaviorSubject<Application | undefined>(undefined);\r\n\r\n\tconstructor(private readonly config: BridgeClientConfiguration = {}) {\r\n\t\tthis.http = axios.create();\r\n\t\tthis.storage = this.config.storage ?? localStorage;\r\n\t\tthis.config.storageKeysPrefix = this.config.storageKeysPrefix ?? \"bridge\";\r\n\t\tthis.http.interceptors.request.use((config) => {\r\n\t\t\tconst token = this.storage.getItem(`${this.config.storageKeysPrefix}_token`);\r\n\t\t\tconfig.headers.set(\"Authorization\", `Bearer ${token}`);\r\n\r\n\t\t\tif (config.headers.get(HeadersEnum.X_CALLER_TYPE) === CallerType.APPLICATION) {\r\n\t\t\t\tconst application = this.application$.getValue();\r\n\t\t\t\tif (application) {\r\n\t\t\t\t\tconfig.auth = {\r\n\t\t\t\t\t\tusername: application.authId,\r\n\t\t\t\t\t\tpassword: application.secretKey\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn config;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getService(service: SupportedServices): InstanceType<SupportedServices> {\r\n\t\tif (this.instanceServices.has(service)) return this.instanceServices.get(service);\r\n\r\n\t\tthis.instanceServices.set(service, new service(this.http, this.storage, this.config));\r\n\r\n\t\treturn this.getService(service);\r\n\t}\r\n\r\n\tpublic useApplication(application: Application | undefined): this {\r\n\t\tthis.application$.next(application);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic getSelectedApplication$(): Observable<Application> {\r\n\t\treturn this.application$.pipe(filter((application) => Boolean(application))) as Observable<Application>;\r\n\t}\r\n}\r\n","export enum TokenType {\r\n\tNATIVE = \"NATIVE\",\r\n\tERC20 = \"ERC20\",\r\n\tBEP20 = \"BEP20\",\r\n\tTRC20 = \"TRC20\"\r\n}\r\nexport enum CallerType {\r\n\tAPPLICATION = \"APPLICATION\",\r\n\tUSER = \"USER\"\r\n}\r\nexport enum HeadersEnum {\r\n\tX_CALLER_TYPE = \"X-Caller-Type\"\r\n}\r\nexport enum PaymentWebhookStatus {\r\n\tSENDING = \"SENDING\",\r\n\tFAILURE = \"FAILURE\",\r\n\tSUCCESS = \"SUCCESS\"\r\n}\r\nexport enum PaymentStatus {\r\n\tAWAITING_PAYMENT = \"AWAITING_PAYMENT\",\r\n\tPAID = \"PAID\"\r\n}\r\nexport enum NetworkType {\r\n\tBITCOIN = \"BITCOIN\",\r\n\tETHEREUM_COMPATIBLE = \"ETHEREUM_COMPATIBLE\",\r\n\tTRON_COMPATIBLE = \"TRON_COMPATIBLE\"\r\n}\r\n","import { type Observable, Subject, takeUntil } from \"rxjs\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const useDestroy = (): { untilDestroy: () => <T>(source: Observable<T>) => Observable<T> } => {\r\n\tconst destroy = new Subject();\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => destroy.next(true);\r\n\t}, []);\r\n\r\n\treturn {\r\n\t\tuntilDestroy: () => <T>(source: Observable<T>): Observable<T> => source.pipe(takeUntil(destroy))\r\n\t};\r\n};\r\n","import type { BridgeClientConfiguration } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\n\r\nexport abstract class Service {\r\n\tconstructor(\r\n\t\tprotected readonly http: AxiosInstance,\r\n\t\tprotected readonly storage: Storage,\r\n\t\tprotected readonly config: BridgeClientConfiguration\r\n\t) {}\r\n}\r\n","import type { Application, BridgeClientConfiguration } from \"@/types.d\";\r\nimport { Service } from \"./service\";\r\nimport type { AxiosInstance } from \"axios\";\r\n\r\nexport class ApplicationService extends Service {\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async create(name: string): Promise<Application> {\r\n\t\treturn await this.http.post(\"/api/application\").then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async getApplications(): Promise<Application[]> {\r\n\t\treturn await this.http.get(\"/api/applications\").then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async getMyApplications(): Promise<Application[]> {\r\n\t\treturn await this.http.get(\"/api/my-applications\").then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async exportPrivateKey(password: string): Promise<string> {\r\n\t\t// TODO decipher private key\r\n\t\treturn \"secret key\";\r\n\t}\r\n\r\n\tpublic async resetPrivateKey(password: string): Promise<void> {\r\n\t\t// TODO reset private key\r\n\t}\r\n}\r\n","import type { Account, BridgeClientConfiguration } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class AuthService extends Service {\r\n\tprivate readonly authMessage = \"Authentication\";\r\n\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async loginViaMetamask(): Promise<{ token: string }> {\r\n\t\tif (\"ethereum\" in window) {\r\n\t\t\tconst provider = window.ethereum as {\r\n\t\t\t\trequest: (...any: any[]) => Promise<any>;\r\n\t\t\t};\r\n\t\t\tconst accounts = await provider.request({\r\n\t\t\t\tmethod: \"eth_requestAccounts\"\r\n\t\t\t});\r\n\t\t\tconst account = accounts[0];\r\n\r\n\t\t\tconst signature = await provider.request({\r\n\t\t\t\tmethod: \"personal_sign\",\r\n\t\t\t\tparams: [this.authMessage, account]\r\n\t\t\t});\r\n\r\n\t\t\tconst { token } = await this.http.post(\"/api/auth/web3\", { signature }).then((response) => response.data);\r\n\r\n\t\t\tthis.storage.setItem(`${this.config.storageKeysPrefix}_token`, token);\r\n\r\n\t\t\treturn { token };\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"WEB3 Provider not found\");\r\n\t}\r\n\r\n\tpublic async getAccounts(): Promise<Account[]> {\r\n\t\treturn await this.http.get<Account[]>(\"/api/auth/accounts\").then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async login(login: string, password: string): Promise<{ token: string }> {\r\n\t\tconst { token } = await this.http.post(`/api/auth/login`, { login, password }).then((res) => res.data);\r\n\r\n\t\tthis.storage.setItem(`${this.config.storageKeysPrefix}_token`, token);\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\tpublic async isAuth(): Promise<boolean> {\r\n\t\tconst token = this.storage.getItem(`${this.config.storageKeysPrefix}_token`) || \"\";\r\n\r\n\t\treturn token.split(\".\").length === 3;\r\n\t}\r\n\r\n\tpublic async logout(): Promise<void> {\r\n\t\tthis.storage.removeItem(`${this.config.storageKeysPrefix}_token`);\r\n\t}\r\n}\r\n","import type { Balance, TransferOptions } from \"@/types.d\";\r\nimport { CallerType, HeadersEnum } from \"@/enums\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class BridgeService extends Service {\r\n\tpublic async getBalance(network: string, symbol: string, address: string): Promise<Balance> {\r\n\t\treturn await this.http\r\n\t\t\t.get<Balance>(`/api/bridge/${network}/${symbol}/wallet/${address}/balance`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t[HeadersEnum.X_CALLER_TYPE]: CallerType.APPLICATION\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async transfer(options: TransferOptions): Promise<{ transactionId: string }> {\r\n\t\treturn await this.http\r\n\t\t\t.post(\r\n\t\t\t\t`/api/bridge/${options.network}/${options.symbol}/transfer`,\r\n\t\t\t\t{\r\n\t\t\t\t\tfrom: options.from,\r\n\t\t\t\t\tto: options.to,\r\n\t\t\t\t\tamount: options.amount\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t[HeadersEnum.X_CALLER_TYPE]: CallerType.APPLICATION\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.then((res) => res.data);\r\n\t}\r\n}\r\n","import type { BridgeClientConfiguration, ConverterOptions } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class ConverterService extends Service {\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async convert(options: ConverterOptions): Promise<{ amount: string }> {\r\n\t\tconst url = `/api/converter/${options.from}/${options.fromDecimals}/${options.amountScaled}/${options.to}/${options.toDecimals}`;\r\n\r\n\t\treturn await this.http.get(url).then((res) => res.data);\r\n\t}\r\n}\r\n","export class FeeService {\r\n\tpublic async getFee(): Promise<{ rate: number }> {\r\n\t\treturn { rate: 1.1 };\r\n\t}\r\n}\r\n","import type { NetworkOptions, Network, NetworkRequest } from \"@/types.d\";\r\nimport { NetworkType } from \"@/enums\";\r\nimport type { AxiosInstance } from \"axios\";\r\n\r\nexport class NetworkService {\r\n\tconstructor(private readonly http: AxiosInstance) {}\r\n\r\n\tpublic async getNetworkByCode(code: string): Promise<Network> {\r\n\t\tconst networks = await this.getNetworks();\r\n\t\tconst network = networks.find((item) => item.code === code);\r\n\r\n\t\tif (!network) {\r\n\t\t\tthrow new Error(`Network ${code} not found`);\r\n\t\t}\r\n\r\n\t\treturn network;\r\n\t}\r\n\r\n\tpublic async getNetworks(): Promise<Network[]> {\r\n\t\treturn await this.http\r\n\t\t\t.get(\"/api/networks\", {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"content-type\": \"application/json\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async create(options: NetworkOptions): Promise<Network> {\r\n\t\tconst request: NetworkRequest = {\r\n\t\t\tname: options.name,\r\n\t\t\tcode: options.code,\r\n\t\t\tkind: options.kind,\r\n\t\t\turl: options.url,\r\n\t\t\tapiKey: \"\",\r\n\t\t\tusername: \"\",\r\n\t\t\tpassword: \"\"\r\n\t\t};\r\n\r\n\t\tif (options.kind === NetworkType.TRON_COMPATIBLE) {\r\n\t\t\trequest.apiKey = options.apiKey;\r\n\t\t}\r\n\r\n\t\treturn await this.http.post(`/api/network`, request);\r\n\t}\r\n\r\n\tpublic async delete(code: string): Promise<void> {\r\n\t\tawait this.http.delete(`/api/network/${code}`);\r\n\t}\r\n}\r\n","import type { BridgeClientConfiguration, Offer } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class OfferService extends Service {\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async getOffers(): Promise<Offer[]> {\r\n\t\treturn await this.http.get(\"/api/offers\").then((res) => res.data);\r\n\t}\r\n}\r\n","import type { PaymentInterface, CreatePaymentOptions, ManualPaymentOptions } from \"@/types.d\";\r\nimport { HeadersEnum, CallerType } from \"@/enums\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class PaymentsService extends Service {\r\n\tpublic async getPayments(): Promise<PaymentInterface[]> {\r\n\t\treturn await this.http\r\n\t\t\t.get<any>(`/api/payments`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t[HeadersEnum.X_CALLER_TYPE]: CallerType.APPLICATION\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async getPaymentById(paymentId: string): Promise<PaymentInterface> {\r\n\t\treturn await this.http.get(`/api/payment/${paymentId}`).then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async createPayment(options: CreatePaymentOptions): Promise<any> {\r\n\t\treturn await this.http\r\n\t\t\t.post(\"/api/payment\", options, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t[HeadersEnum.X_CALLER_TYPE]: CallerType.APPLICATION\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async manualPay(paymentId: string, options: ManualPaymentOptions): Promise<PaymentInterface> {\r\n\t\treturn await this.http.post(`/api/payment/${paymentId}/pay`, options).then((res) => res.data);\r\n\t}\r\n}\r\n","import type { CreateTokenOptions, Token } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\nimport { defer, from, share, throttleTime } from \"rxjs\";\r\n\r\nexport class TokenService {\r\n\tpublic readonly $tokenStream = defer(() => from(this.getTokens())).pipe(share(), throttleTime(10_000));\r\n\r\n\tconstructor(private readonly http: AxiosInstance) {}\r\n\r\n\tpublic async getTokensBySymbol(symbol: string, networkCode?: string): Promise<Token> {\r\n\t\tconst tokens = await this.getTokens();\r\n\t\tconst token = tokens.find((item) => {\r\n\t\t\tif (networkCode) {\r\n\t\t\t\treturn item.symbol === symbol && item.network.code === networkCode;\r\n\t\t\t}\r\n\r\n\t\t\treturn item.symbol === symbol;\r\n\t\t});\r\n\r\n\t\tif (!token) throw new Error(`Token ${symbol}[${networkCode ?? \"\"}] not found`);\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\tpublic async getTokens(): Promise<Token[]> {\r\n\t\treturn await this.http.get(`/api/tokens`).then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async create(options: CreateTokenOptions): Promise<Token> {\r\n\t\treturn await this.http.post(`/api/token`, options).then((res) => res.data);\r\n\t}\r\n\r\n\tpublic async delete(symbol: string): Promise<void> {\r\n\t\tawait this.http.delete(`/api/token/${symbol}`);\r\n\t}\r\n}\r\n","import type { BridgeClientConfiguration, WalletWithBalances } from \"@/types.d\";\r\nimport { Service } from \"./service\";\r\nimport type { AxiosInstance } from \"axios\";\r\n\r\nexport class WalletBalanceService extends Service {\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async getWalletsWithBalances(filters: { owners?: string[] } = {}): Promise<WalletWithBalances[]> {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (filters.owners && filters.owners.length) {\r\n\t\t\tparams.set(\"owners\", filters.owners.join(\",\"));\r\n\t\t}\r\n\r\n\t\treturn await this.http.get(\"/api/wallet-balances\", { params }).then((res) => res.data);\r\n\t}\r\n}\r\n","import type { BridgeClientConfiguration, Wallet } from \"@/types.d\";\r\nimport type { AxiosInstance } from \"axios\";\r\nimport { Service } from \"./service\";\r\n\r\nexport class WalletService extends Service {\r\n\tconstructor(http: AxiosInstance, storage: Storage, config: BridgeClientConfiguration) {\r\n\t\tsuper(http, storage, config);\r\n\t}\r\n\r\n\tpublic async getWallets(filters: { owners?: string[] } = {}): Promise<Wallet[]> {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (filters.owners && filters.owners.length) {\r\n\t\t\tparams.set(\"owners\", filters.owners.join(\",\"));\r\n\t\t}\r\n\r\n\t\treturn await this.http.get(\"/api/bridge/wallets\", { params }).then((res) => res.data);\r\n\t}\r\n}\r\n","import BigNumber from \"bignumber.js\";\r\n\r\nexport class AmountTransform {\r\n\tstatic fromCents(amountScaled: number | bigint | string, decimals = 8, scale = decimals): string {\r\n\t\treturn new BigNumber(Number(amountScaled)).dividedBy(10 ** decimals).toFixed(scale);\r\n\t}\r\n\r\n\tstatic toCents(amount: number | bigint | string, decimals = 8): string {\r\n\t\treturn new BigNumber(Number(amount)).multipliedBy(10 ** decimals).toFixed(0);\r\n\t}\r\n}\r\n"],"mappings":"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","names":["axios","BehaviorSubject","filter","TokenType","CallerType","HeadersEnum","PaymentWebhookStatus","PaymentStatus","NetworkType","BridgeClient","config","BehaviorSubject","_a","_b","axios","token","application","service","filter","Subject","takeUntil","useEffect","useDestroy","destroy","source","Service","http","storage","config","ApplicationService","Service","http","storage","config","name","__async","res","password","AuthService","Service","http","storage","config","__async","provider","account","signature","token","response","res","login","password","BridgeService","Service","network","symbol","address","__async","res","options","ConverterService","Service","http","storage","config","options","__async","url","res","FeeService","__async","NetworkService","http","code","__async","network","item","res","options","request","OfferService","Service","http","storage","config","__async","res","PaymentsService","Service","__async","res","paymentId","options","defer","from","share","throttleTime","TokenService","http","defer","from","share","throttleTime","symbol","networkCode","__async","token","item","res","options","WalletBalanceService","Service","http","storage","config","__async","filters","params","res","WalletService","Service","http","storage","config","__async","filters","params","res","BigNumber","AmountTransform","amountScaled","decimals","scale","amount"]}